// This file is auto-generated by @hey-api/openapi-ts

export const $GetAppJwksResponse = {
    properties: {
        keys: {
            description: `The value of the "keys" parameter is an array of JWK values. The order of keys has no
meaning.`,
            items: {
                '$ref': '#/components/schemas/JsonWebKey'
            },
            type: 'array'
        }
    },
    required: ['keys'],
    type: 'object'
} as const;

export const $JsonWebKey = {
    description: `Standard Json Web Key specification following https://www.rfc-editor.org/rfc/rfc7517 and
https://www.rfc-editor.org/rfc/rfc7518.html.`,
    properties: {
        alg: {
            description: `The "alg" (algorithm) parameter identifies the algorithm intended for
use with the key.
See https://www.rfc-editor.org/rfc/rfc7517#section-4`,
            type: 'string'
        },
        kid: {
            description: `The "kid" (key ID) parameter is used to match a specific key.  This
is used, for instance, to choose among a set of keys within a JWK Set
during key rollover. When "kid" values are used within a JWK Set,
different keys within the JWK Set SHOULD use distinct "kid" values.
The "kid" value is a case-sensitive string.
See https://www.rfc-editor.org/rfc/rfc7517#section-4`,
            type: 'string'
        },
        kty: {
            description: `The "kty" (key type) parameter identifies the cryptographic algorithm
family used with the key, such as "RSA" or "EC". The "kty" value is a
case-sensitive string. At the moment, only "RSA" is supported.
See https://www.rfc-editor.org/rfc/rfc7517#section-4`,
            type: 'string'
        },
        n: {
            description: `The "n" (modulus) parameter contains the modulus value for the RSA
   public key.  It is represented as a Base64urlUInt-encoded value.
See https://www.rfc-editor.org/rfc/rfc7518.html#section-6.3`,
            type: 'string'
        },
        e: {
            description: `The "e" (exponent) parameter contains the exponent value for the RSA
   public key.  It is represented as a Base64urlUInt-encoded value.
See https://www.rfc-editor.org/rfc/rfc7518.html#section-6.3`,
            type: 'string'
        },
        use: {
            description: `The "use" (public key use) parameter identifies the intended use of
the public key. The "use" parameter is employed to indicate whether
a public key is used for encrypting data or verifying the signature
on data. Values are commonly "sig" (signature) or "enc" (encryption).
See https://www.rfc-editor.org/rfc/rfc7517#section-4`,
            type: 'string'
        }
    },
    required: ['e', 'kid', 'kty', 'n'],
    type: 'object'
} as const;

export const $GetAssetResponse = {
    properties: {
        asset: {
            '$ref': '#/components/schemas/Asset'
        }
    },
    required: ['asset'],
    type: 'object'
} as const;

export const $UploadAssetResponse = {
    deprecated: true,
    properties: {
        asset: {
            '$ref': '#/components/schemas/Asset'
        }
    },
    required: ['asset'],
    type: 'object'
} as const;

export const $UpdateAssetRequest = {
    properties: {
        name: {
            description: `The name of the asset. This is shown in the Canva UI.
When this field is undefined, nothing is updated.
Maximum length 50 characters.`,
            example: 'My Awesome Upload',
            maxLength: 50,
            type: 'string'
        },
        tags: {
            description: `The replacement tags for the asset.
When this field is undefined, nothing is updated.
Maximum length 50 tags. Each tag
has a maximum length of 50 characters.`,
            example: ['image', 'holiday', 'best day ever'],
            items: {
                maxLength: 50,
                type: 'string'
            },
            maxItems: 50,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $UpdateAssetResponse = {
    properties: {
        asset: {
            '$ref': '#/components/schemas/Asset'
        }
    },
    required: ['asset'],
    type: 'object'
} as const;

export const $UpdateAssetDeprecatedRequest = {
    properties: {
        name: {
            description: `The name of the asset. This is shown in the Canva UI.
When this field is undefined, nothing is updated.
Maximum length 50 characters.`,
            example: 'My Awesome Upload',
            maxLength: 50,
            type: 'string'
        },
        tags: {
            description: `The replacement tags for the asset.
When this field is undefined, nothing is updated.
Maximum length 50 tags. Each tag
has a maximum length of 50 characters.`,
            example: ['image', 'holiday', 'best day ever'],
            items: {
                maxLength: 50,
                type: 'string'
            },
            maxItems: 50,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $Asset = {
    description: 'The asset object, which contains metadata about the asset.',
    properties: {
        id: {
            description: 'The ID of the asset.',
            example: 'Msd59349ff',
            type: 'string'
        },
        name: {
            description: 'The name of the asset.',
            example: 'My Awesome Upload',
            type: 'string'
        },
        tags: {
            description: `The user-facing tags attached to the asset.
Users can add these tags to their uploaded assets, and they can search their uploaded
assets in the Canva UI by searching for these tags. For information on how users use
tags, see the
[Canva Help Center page on asset tags](https://www.canva.com/help/add-edit-tags/).`,
            example: ['image', 'holiday', 'best day ever'],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        import_status: {
            '$ref': '#/components/schemas/ImportStatus'
        },
        created_at: {
            description: `When the asset was added to Canva, as a Unix timestamp (in seconds since the Unix
Epoch).`,
            example: 1377396000,
            format: 'int64',
            type: 'integer'
        },
        updated_at: {
            description: `When the asset was last updated in Canva, as a Unix timestamp (in seconds since the
Unix Epoch).`,
            example: 1692928800,
            format: 'int64',
            type: 'integer'
        },
        thumbnail: {
            '$ref': '#/components/schemas/Thumbnail'
        }
    },
    required: ['created_at', 'id', 'name', 'tags', 'updated_at'],
    type: 'object'
} as const;

export const $ImportStatus = {
    deprecated: true,
    description: 'The import status of the asset.',
    properties: {
        state: {
            '$ref': '#/components/schemas/ImportStatusState'
        },
        error: {
            '$ref': '#/components/schemas/ImportError'
        }
    },
    required: ['state'],
    type: 'object'
} as const;

export const $ImportStatusState = {
    deprecated: true,
    description: 'State of the import job for an uploaded asset.',
    enum: ['failed', 'in_progress', 'success'],
    example: 'success',
    type: 'string'
} as const;

export const $ImportError = {
    deprecated: true,
    description: 'If the import fails, this object provides details about the error.',
    properties: {
        code: {
            '$ref': '#/components/schemas/ImportErrorCode'
        },
        message: {
            description: 'A human-readable description of what went wrong.',
            type: 'string'
        }
    },
    required: ['code', 'message'],
    type: 'object'
} as const;

export const $ImportErrorCode = {
    deprecated: true,
    description: `A short string indicating why the upload failed. This field can be used to handle errors programmatically.
`,
    enum: ['file_too_big', 'import_failed'],
    type: 'string'
} as const;

export const $UploadMetadata = {
    deprecated: true,
    description: 'Metadata about the asset that you include as a header parameter when uploading an asset.',
    properties: {
        name: {
            description: 'The name of the asset. The maximum length of this property is 50 characters.',
            example: 'My Awesome Upload',
            maxLength: 50,
            minLength: 1,
            type: 'string'
        },
        parent_folder_id: {
            description: 'The ID of the parent folder where the asset will be uploaded.',
            example: 'FG5IFBpY3M',
            maxLength: 50,
            minLength: 1,
            type: 'string'
        },
        tags: {
            description: 'The user-facing tags attached to the asset. Users can also add these tags to their uploaded assets, and they can search their uploaded assets in the Canva UI by searching for these tags. For information on how users use tags, see the [Canva Help Center page on asset tags](https://www.canva.com/help/add-edit-tags/). Maximum length 50 tags. Each tag has a maximum length of 50 characters.',
            example: ['go to market', 'holiday', 'adventure'],
            items: {
                type: 'string'
            },
            maxItems: 50,
            type: 'array'
        }
    },
    required: ['name', 'parent_folder_id'],
    type: 'object'
} as const;

export const $CreateAssetUploadJobResponse = {
    properties: {
        job: {
            '$ref': '#/components/schemas/AssetUploadJob'
        }
    },
    required: ['job'],
    type: 'object'
} as const;

export const $GetAssetUploadJobResponse = {
    properties: {
        job: {
            '$ref': '#/components/schemas/AssetUploadJob'
        }
    },
    required: ['job'],
    type: 'object'
} as const;

export const $AssetUploadJob = {
    description: 'The status of the asset upload job.',
    example: {
        id: 'Msd59349ff',
        status: 'success',
        asset: {
            id: 'Msd59349ff',
            name: 'My Awesome Upload',
            tags: ['image', 'holiday', 'best day ever'],
            created_at: 1377396000,
            updated_at: 1692928800,
            thumbnail: {
                width: 595,
                height: 335,
                url: 'https://document-export.canva.com/Vczz9/zF9vzVtdADc/2/thumbnail/0001.png?<query-string>'
            }
        }
    },
    properties: {
        id: {
            description: 'The ID of the asset upload job.',
            example: 'Msd59349ff',
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/AssetUploadStatus'
        },
        error: {
            '$ref': '#/components/schemas/AssetUploadError'
        },
        asset: {
            '$ref': '#/components/schemas/Asset'
        }
    },
    required: ['id', 'status'],
    type: 'object'
} as const;

export const $AssetUploadStatus = {
    description: 'Status of the asset upload job.',
    enum: ['failed', 'in_progress', 'success'],
    example: 'success',
    type: 'string'
} as const;

export const $AssetUploadError = {
    description: 'If the upload fails, this object provides details about the error.',
    properties: {
        code: {
            '$ref': '#/components/schemas/AssetUploadErrorCode'
        },
        message: {
            description: 'A human-readable description of what went wrong.',
            example: 'Failed to import because the file is too big.',
            type: 'string'
        }
    },
    required: ['code', 'message'],
    type: 'object'
} as const;

export const $AssetUploadErrorCode = {
    description: `A short string indicating why the upload failed. This field can be used to handle errors
programmatically.`,
    enum: ['file_too_big', 'import_failed'],
    example: 'file_too_big',
    type: 'string'
} as const;

export const $AssetUploadMetadata = {
    description: 'Metadata for the asset being uploaded.',
    properties: {
        name_base64: {
            description: `The asset's name, encoded in Base64.

The maximum length of an asset name in Canva (unencoded) is 50 characters.

Base64 encoding allows names containing emojis and other special
characters to be sent using HTTP headers.
For example, "My Awesome Upload 🚀" Base64 encoded
is \`TXkgQXdlc29tZSBVcGxvYWQg8J+agA==\`.`,
            example: 'TXkgQXdlc29tZSBVcGxvYWQg8J+agA==',
            minLength: 1,
            type: 'string'
        }
    },
    required: ['name_base64'],
    type: 'object'
} as const;

export const $CreateDesignAutofillJobRequest = {
    properties: {
        brand_template_id: {
            description: 'ID of the input brand template.',
            example: 'DAFVztcvd9z',
            type: 'string'
        },
        title: {
            description: `Title to use for the autofilled design. Must be less than 256 characters.

If no design title is provided, the autofilled design will have the same title as the brand template.`,
            maxLength: 255,
            minLength: 1,
            type: 'string'
        },
        preview: {
            deprecated: true,
            description: `This property is no longer used and will soon be removed.

This property is \`false\` by default.`,
            example: false,
            type: 'boolean'
        },
        data: {
            additionalProperties: {
                '$ref': '#/components/schemas/DatasetValue'
            },
            description: 'Data object containing the data fields and values to autofill.',
            example: {
                cute_pet_image_of_the_day: {
                    type: 'image',
                    asset_id: 'Msd59349ff'
                },
                cute_pet_witty_pet_says: {
                    type: 'text',
                    text: 'It was like this when I got here!'
                }
            },
            type: 'object'
        }
    },
    required: ['brand_template_id', 'data'],
    type: 'object'
} as const;

export const $CreateDesignAutofillJobResponse = {
    properties: {
        job: {
            '$ref': '#/components/schemas/DesignAutofillJob'
        }
    },
    required: ['job'],
    type: 'object'
} as const;

export const $DatasetValue = {
    description: 'The data field to autofill.',
    discriminator: {
        mapping: {
            image: '#/components/schemas/DatasetImageValue',
            text: '#/components/schemas/DatasetTextValue'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/DatasetImageValue'
        },
        {
            '$ref': '#/components/schemas/DatasetTextValue'
        }
    ],
    type: 'object'
} as const;

export const $Dataset = {
    additionalProperties: {
        '$ref': '#/components/schemas/DatasetValue'
    },
    description: 'Data object containing the data fields and values to autofill.',
    example: {
        cute_pet_image_of_the_day: {
            type: 'image',
            asset_id: 'Msd59349ff'
        },
        cute_pet_witty_pet_says: {
            type: 'text',
            text: 'It was like this when I got here!'
        }
    },
    type: 'object'
} as const;

export const $DatasetImageValue = {
    description: 'If the data field is an image field.',
    properties: {
        type: {
            enum: ['image'],
            type: 'string'
        },
        asset_id: {
            description: `\`asset_id\` of the image to insert into the template element.`,
            example: 'Msd59349ff',
            type: 'string'
        }
    },
    required: ['asset_id', 'type'],
    type: 'object'
} as const;

export const $DatasetTextValue = {
    description: 'If the data field is a text field.',
    properties: {
        type: {
            enum: ['text'],
            type: 'string'
        },
        text: {
            description: 'Text to insert into the template element.',
            example: 'It was like this when I got here!',
            type: 'string'
        }
    },
    required: ['text', 'type'],
    type: 'object'
} as const;

export const $GetDesignAutofillJobResponse = {
    properties: {
        job: {
            '$ref': '#/components/schemas/DesignAutofillJob'
        }
    },
    required: ['job'],
    type: 'object'
} as const;

export const $DesignAutofillJob = {
    description: 'Details about the autofill job.',
    properties: {
        id: {
            description: 'ID of the asynchronous job that is creating the design using the provided data.',
            example: '450a76e7-f96f-43ae-9c37-0e1ce492ac72',
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/DesignAutofillStatus'
        },
        result: {
            '$ref': '#/components/schemas/DesignAutofillJobResult'
        },
        error: {
            '$ref': '#/components/schemas/AutofillError'
        }
    },
    required: ['id', 'status'],
    type: 'object'
} as const;

export const $DesignAutofillJobResult = {
    description: 'Result of the design autofill job. Only present if job status is `success`.',
    discriminator: {
        mapping: {
            create_design: '#/components/schemas/CreateDesignAutofillJobResult'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/CreateDesignAutofillJobResult'
        }
    ],
    type: 'object'
} as const;

export const $CreateDesignAutofillJobResult = {
    description: "Design has been created and saved to user's root folder.",
    properties: {
        type: {
            enum: ['create_design'],
            type: 'string'
        },
        design: {
            '$ref': '#/components/schemas/DesignSummary'
        }
    },
    required: ['design', 'type'],
    type: 'object'
} as const;

export const $DesignAutofillStatus = {
    description: 'Status of the design autofill job.',
    enum: ['in_progress', 'success', 'failed'],
    example: 'success',
    type: 'string'
} as const;

export const $AutofillErrorCode = {
    enum: ['autofill_error', 'thumbnail_generation_error', 'create_design_error'],
    type: 'string'
} as const;

export const $AutofillError = {
    description: 'If the autofill job fails, this object provides details about the error.',
    properties: {
        code: {
            '$ref': '#/components/schemas/AutofillErrorCode'
        },
        message: {
            description: 'A human-readable description of what went wrong.',
            type: 'string'
        }
    },
    required: ['code', 'message'],
    type: 'object'
} as const;

export const $ListBrandTemplatesResponse = {
    properties: {
        continuation: {
            description: `If the success response contains a continuation token, the user has access to more
brand templates you can list. You can use this token as a query parameter and retrieve
more templates from the list, for example
\`/v1/brand-templates?continuation={continuation}\`.
To retrieve all the brand templates available to the user, you might need to make
multiple requests.`,
            example: 'RkFGMgXlsVTDbMd:MR3L0QjiaUzycIAjx0yMyuNiV0OildoiOwL0x32G4NjNu4FwtAQNxowUQNMMYN',
            type: 'string'
        },
        items: {
            description: 'The list of brand templates.',
            items: {
                '$ref': '#/components/schemas/BrandTemplate'
            },
            type: 'array'
        }
    },
    required: ['items'],
    type: 'object'
} as const;

export const $GetBrandTemplateResponse = {
    description: 'Successful response from a `getBrandTemplate` request.',
    properties: {
        brand_template: {
            '$ref': '#/components/schemas/BrandTemplate'
        }
    },
    required: ['brand_template'],
    type: 'object'
} as const;

export const $BrandTemplate = {
    description: 'An object representing a brand template with associated metadata.',
    properties: {
        id: {
            description: 'The brand template ID.',
            example: 'DEMzWSwy3BI',
            type: 'string'
        },
        title: {
            description: 'The brand template title, as shown in the Canva UI.',
            example: 'Advertisement Template',
            type: 'string'
        },
        view_url: {
            description: 'A URL Canva users can visit to view the brand template.',
            example: 'https://www.canva.com/design/DAE35hE8FA4/view',
            type: 'string'
        },
        create_url: {
            description: 'A URL Canva users can visit to create a new design from the template.',
            example: 'https://www.canva.com/templates/DADao7wZnAA/remix',
            type: 'string'
        },
        thumbnail: {
            '$ref': '#/components/schemas/Thumbnail'
        }
    },
    required: ['create_url', 'id', 'title', 'view_url'],
    type: 'object'
} as const;

export const $GetBrandTemplateDatasetResponse = {
    description: 'Successful response from a `getBrandTemplateDataset` request.',
    properties: {
        dataset: {
            additionalProperties: {
                '$ref': '#/components/schemas/DataField'
            },
            description: `The dataset definition for the brand template. The dataset definition contains the data inputs available for use with the
[Create design autofill job API](https://www.canva.dev/docs/connect/api-reference/autofills/create-design-autofill-job/).`,
            example: {
                cute_pet_image_of_the_day: {
                    type: 'image'
                },
                cute_pet_witty_pet_says: {
                    type: 'text'
                }
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $DatasetDefinition = {
    additionalProperties: {
        '$ref': '#/components/schemas/DataField'
    },
    description: `The dataset definition for the brand template. The dataset definition contains the data inputs available for use with the
[Create design autofill job API](https://www.canva.dev/docs/connect/api-reference/autofills/create-design-autofill-job/).`,
    example: {
        cute_pet_image_of_the_day: {
            type: 'image'
        },
        cute_pet_witty_pet_says: {
            type: 'text'
        }
    },
    type: 'object'
} as const;

export const $DataField = {
    description: 'A named data field that can be autofilled in the brand template.',
    discriminator: {
        mapping: {
            image: '#/components/schemas/ImageDataField',
            text: '#/components/schemas/TextDataField'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/ImageDataField'
        },
        {
            '$ref': '#/components/schemas/TextDataField'
        }
    ],
    type: 'object'
} as const;

export const $ImageDataField = {
    description: 'An image for a brand template. You can autofill the brand template with an image by providing its `asset_id`.',
    properties: {
        type: {
            enum: ['image'],
            type: 'string'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $TextDataField = {
    description: 'Some text for a brand template. You can autofill the brand template with this value.',
    properties: {
        type: {
            enum: ['text'],
            type: 'string'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $CreateCommentRequest = {
    properties: {
        attached_to: {
            '$ref': '#/components/schemas/CommentObjectInput'
        },
        message: {
            description: `The comment message. This is the comment body shown in the Canva UI.

You can also mention users in your message by specifying their User ID and Team ID
using the format \`[user_id:team_id]\`. If the \`assignee_id\` parameter is specified, you
must mention the assignee in the message.`,
            example: 'Great work [UAFZjbdfojE:BABdhiebEoe]!',
            type: 'string'
        },
        assignee_id: {
            description: `Lets you assign the comment to a Canva user using their User ID. You _must_ mention the
assigned user in the \`message\`.`,
            example: 'UAFZjbdfojE',
            type: 'string'
        }
    },
    required: ['attached_to', 'message'],
    type: 'object'
} as const;

export const $CreateReplyRequest = {
    properties: {
        attached_to: {
            '$ref': '#/components/schemas/CommentObjectInput'
        },
        message: {
            description: `The reply comment message. This is the reply comment body shown in the Canva UI.

You can also mention users in your message by specifying their User ID and Team ID
using the format \`[user_id:team_id]\`.`,
            example: 'Thanks!',
            type: 'string'
        }
    },
    required: ['attached_to', 'message'],
    type: 'object'
} as const;

export const $CreateCommentResponse = {
    properties: {
        comment: {
            '$ref': '#/components/schemas/ParentComment'
        }
    },
    required: ['comment'],
    type: 'object'
} as const;

export const $CreateReplyResponse = {
    properties: {
        comment: {
            '$ref': '#/components/schemas/ReplyComment'
        }
    },
    required: ['comment'],
    type: 'object'
} as const;

export const $GetCommentResponse = {
    description: 'Successful response from a `getComment` request.',
    properties: {
        comment: {
            '$ref': '#/components/schemas/Comment'
        }
    },
    required: ['comment'],
    type: 'object'
} as const;

export const $Comment = {
    description: 'The comment object, which contains metadata about the comment.',
    discriminator: {
        mapping: {
            parent: '#/components/schemas/ParentComment',
            reply: '#/components/schemas/ReplyComment'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/ParentComment'
        },
        {
            '$ref': '#/components/schemas/ReplyComment'
        }
    ],
    type: 'object'
} as const;

export const $ParentComment = {
    description: `Data about the comment, including the message, author, and
the object (such as a design) the comment is attached to.`,
    properties: {
        type: {
            enum: ['parent'],
            type: 'string'
        },
        id: {
            description: `The ID of the comment.

You can use this ID to create replies to the comment using the [Create reply API](https://www.canva.dev/docs/connect/api-reference/comments/create-reply/).`,
            example: 'KeAbiEAjZEj',
            type: 'string'
        },
        attached_to: {
            '$ref': '#/components/schemas/CommentObject'
        },
        message: {
            description: `The comment message. This is the comment body shown in the Canva UI.
User mentions are shown here in the format \`[user_id:team_id]\`.`,
            example: 'Great work [UAFZjbdfojE:BABdhiebEoe]!',
            type: 'string'
        },
        author: {
            '$ref': '#/components/schemas/User'
        },
        created_at: {
            description: `When the comment or reply was created, as a Unix timestamp
(in seconds since the Unix Epoch).`,
            example: 1692928800,
            format: 'int64',
            type: 'integer'
        },
        updated_at: {
            description: `When the comment or reply was last updated, as a Unix timestamp
(in seconds since the Unix Epoch).`,
            example: 1692928900,
            format: 'int64',
            type: 'integer'
        },
        mentions: {
            additionalProperties: {
                '$ref': '#/components/schemas/TeamUser'
            },
            description: 'The Canva users mentioned in the comment.',
            example: {
                'oUnPjZ2k2yuhftbWF7873o:oBpVhLW22VrqtwKgaayRbP': {
                    user_id: 'oUnPjZ2k2yuhftbWF7873o',
                    team_id: 'oBpVhLW22VrqtwKgaayRbP',
                    display_name: 'John Doe'
                }
            },
            type: 'object'
        },
        assignee: {
            '$ref': '#/components/schemas/User'
        },
        resolver: {
            '$ref': '#/components/schemas/User'
        }
    },
    required: ['author', 'id', 'mentions', 'message', 'type'],
    type: 'object'
} as const;

export const $ReplyComment = {
    description: `Data about the reply comment, including the message, author, and
the object (such as a design) the comment is attached to.`,
    properties: {
        type: {
            enum: ['reply'],
            type: 'string'
        },
        id: {
            description: 'The ID of the comment.',
            example: 'KeAZEAjijEb',
            type: 'string'
        },
        attached_to: {
            '$ref': '#/components/schemas/CommentObject'
        },
        message: {
            description: `The comment message. This is the comment body shown in the Canva UI.
User mentions are shown here in the format \`[user_id:team_id]\`.`,
            example: 'Thanks!',
            type: 'string'
        },
        author: {
            '$ref': '#/components/schemas/User'
        },
        created_at: {
            description: `When the comment or reply was created, as a Unix timestamp
(in seconds since the Unix Epoch).`,
            example: 1692929800,
            format: 'int64',
            type: 'integer'
        },
        updated_at: {
            description: `When the comment or reply was last updated, as a Unix timestamp
(in seconds since the Unix Epoch).`,
            example: 1692929900,
            format: 'int64',
            type: 'integer'
        },
        mentions: {
            additionalProperties: {
                '$ref': '#/components/schemas/TeamUser'
            },
            description: 'The Canva users mentioned in the comment.',
            example: {
                'oUnPjZ2k2yuhftbWF7873o:oBpVhLW22VrqtwKgaayRbP': {
                    user_id: 'oUnPjZ2k2yuhftbWF7873o',
                    team_id: 'oBpVhLW22VrqtwKgaayRbP',
                    display_name: 'John Doe'
                }
            },
            type: 'object'
        },
        thread_id: {
            description: `The ID of the comment thread this reply is in. This ID is the same as the \`id\` of the
parent comment.`,
            example: 'KeAbiEAjZEj',
            type: 'string'
        }
    },
    required: ['author', 'id', 'mentions', 'message', 'thread_id', 'type'],
    type: 'object'
} as const;

export const $CommentObject = {
    description: 'Identifying information about the object (such as a design) that the comment is attached to.',
    discriminator: {
        mapping: {
            design: '#/components/schemas/DesignCommentObject'
        },
        propertyName: 'type'
    },
    example: {
        design_id: 'DAFVztcvd9z',
        type: 'design'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/DesignCommentObject'
        }
    ],
    type: 'object'
} as const;

export const $DesignCommentObject = {
    description: 'If the comment is attached to a Canva Design.',
    properties: {
        type: {
            enum: ['design'],
            type: 'string'
        },
        design_id: {
            description: 'The ID of the design this comment is attached to.',
            example: 'DAFVztcvd9z',
            type: 'string'
        }
    },
    required: ['design_id', 'type'],
    type: 'object'
} as const;

export const $CommentObjectInput = {
    description: `An object containing identifying information for the design or other object you want to
attach the comment to.`,
    discriminator: {
        mapping: {
            design: '#/components/schemas/DesignCommentObjectInput'
        },
        propertyName: 'type'
    },
    example: {
        design_id: 'DAFVztcvd9z',
        type: 'design'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/DesignCommentObjectInput'
        }
    ],
    type: 'object'
} as const;

export const $DesignCommentObjectInput = {
    description: 'If the comment is attached to a Canva Design.',
    properties: {
        type: {
            enum: ['design'],
            type: 'string'
        },
        design_id: {
            description: 'The ID of the design you want to attach this comment to.',
            example: 'DAFVztcvd9z',
            type: 'string'
        }
    },
    required: ['design_id', 'type'],
    type: 'object'
} as const;

export const $CommentEvent = {
    description: 'Basic details about the comment.',
    properties: {
        type: {
            '$ref': '#/components/schemas/CommentEventType'
        },
        data: {
            '$ref': '#/components/schemas/Comment'
        }
    },
    required: ['data', 'type'],
    type: 'object'
} as const;

export const $Mentions = {
    additionalProperties: {
        '$ref': '#/components/schemas/TeamUser'
    },
    description: 'The Canva users mentioned in the comment.',
    example: {
        'oUnPjZ2k2yuhftbWF7873o:oBpVhLW22VrqtwKgaayRbP': {
            user_id: 'oUnPjZ2k2yuhftbWF7873o',
            team_id: 'oBpVhLW22VrqtwKgaayRbP',
            display_name: 'John Doe'
        }
    },
    type: 'object'
} as const;

export const $CommentEventType = {
    description: 'The type of comment event.',
    enum: ['comment', 'reply', 'mention', 'assign', 'resolve'],
    type: 'string'
} as const;

export const $GetSigningPublicKeysResponse = {
    properties: {
        keys: {
            description: `A Json Web Key Set (JWKS) with public keys used for signing webhooks. You can use this JWKS
to verify that a webhook was sent from Canva.`,
            example: [
                {
                    kid: 'a418dc7d-ecc5-5c4b-85ce-e1104a8addbe',
                    kty: 'OKP',
                    crv: 'Ed25519',
                    x: 'aIQtqd0nDfB-ug0DrzZbwTum-1ITdXvKxGFak_1VB2j'
                },
                {
                    kid: 'c8de5bec1-1b88-4ddaae04acc-ce415-5d7',
                    kty: 'OKP',
                    crv: 'Ed25519',
                    x: 'm2d1FT-gfBXxIzKwdQVTra0D-aBq_ubZ1jI0GuvkDtn'
                }
            ],
            items: {
                '$ref': '#/components/schemas/EdDsaJwk'
            },
            type: 'array'
        }
    },
    required: ['keys'],
    type: 'object'
} as const;

export const $EdDsaJwk = {
    description: `A JSON Web Key Set (JWKS) using the Edwards-curve Digital Signature Algorithm (EdDSA), as
described in [RFC-8037](https://www.rfc-editor.org/rfc/rfc8037.html#appendix-A).`,
    properties: {
        kid: {
            description: `The \`kid\` (key ID) is a unique identifier for a public key. When the keys used
to sign webhooks are rotated, you can use this ID to select the correct key
within a JWK Set during the key rollover. The \`kid\` value is case-sensitive.`,
            type: 'string'
        },
        kty: {
            description: `The \`kty\` (key type) identifies the cryptographic algorithm family used with
the key, such as "RSA" or "EC". Only Octet Key Pairs
(\`OKPs\`) are supported.
The \`kty\` value is case-sensitive. For more information on the \`kty\` property
and OKPs, see [RFC-8037 — "kty" (Key Type)
Parameter](https://www.rfc-editor.org/rfc/rfc8037.html#section-2).`,
            type: 'string'
        },
        crv: {
            description: `The \`crv\` (curve) property identifies the curve used for elliptical curve
encryptions. Only "Ed25519" is supported. For more information on the \`crv\`
property, see [RFC-8037 — Key Type
"OKP"](https://www.rfc-editor.org/rfc/rfc8037.html#section-2).`,
            type: 'string'
        },
        x: {
            description: `The \`x\` property is the public key of an elliptical curve encryption. The key
is Base64urlUInt-encoded. For more information on the \`x\` property, see
[RFC-8037 — "x" (X Coordinate)
Parameter](https://www.rfc-editor.org/rfc/rfc8037#section-2).`,
            type: 'string'
        }
    },
    required: ['crv', 'kid', 'kty', 'x'],
    type: 'object'
} as const;

export const $GetListDesignResponse = {
    properties: {
        continuation: {
            description: `A continuation token.
If the success response contains a continuation token, the list contains more designs
you can list. You can use this token as a query parameter and retrieve more
designs from the list, for example
\`/v1/designs?continuation={continuation}\`.

To retrieve all of a user's designs, you might need to make multiple requests.`,
            example: 'RkFGMgXlsVTDbMd:MR3L0QjiaUzycIAjx0yMyuNiV0OildoiOwL0x32G4NjNu4FwtAQNxowUQNMMYN',
            type: 'string'
        },
        items: {
            description: 'The list of designs.',
            items: {
                '$ref': '#/components/schemas/Design'
            },
            type: 'array'
        }
    },
    required: ['items'],
    type: 'object'
} as const;

export const $CreateDesignRequest = {
    description: `Body parameters for creating a new design.
At least one of \`design_type\` or \`asset_id\` must be defined
to create a new design.`,
    properties: {
        design_type: {
            '$ref': '#/components/schemas/DesignTypeInput'
        },
        asset_id: {
            description: 'The ID of an asset to insert into the created design.',
            example: 'Msd59349ff',
            type: 'string'
        },
        title: {
            description: 'The name of the design. Must be less than 256 characters.',
            example: 'My Holiday Presentation',
            maxLength: 255,
            minLength: 1,
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $CreateDesignResponse = {
    description: 'Details about the new design.',
    properties: {
        design: {
            '$ref': '#/components/schemas/Design'
        }
    },
    required: ['design'],
    type: 'object'
} as const;

export const $GetDesignResponse = {
    description: 'Successful response from a `getDesign` request.',
    properties: {
        design: {
            '$ref': '#/components/schemas/Design'
        }
    },
    required: ['design'],
    type: 'object'
} as const;

export const $Design = {
    description: 'The design object, which contains metadata about the design.',
    properties: {
        id: {
            description: 'The design ID.',
            example: 'DAFVztcvd9z',
            type: 'string'
        },
        title: {
            description: 'The design title.',
            example: 'My summer holiday',
            type: 'string'
        },
        owner: {
            '$ref': '#/components/schemas/TeamUserSummary'
        },
        thumbnail: {
            '$ref': '#/components/schemas/Thumbnail'
        },
        urls: {
            '$ref': '#/components/schemas/DesignLinks'
        }
    },
    required: ['id', 'owner', 'urls'],
    type: 'object'
} as const;

export const $DesignLinks = {
    description: 'A temporary set of URLs for viewing or editing the design.',
    properties: {
        edit_url: {
            description: `A temporary editing URL for the design.

NOTE: This is not a permanent URL, it is only valid for 30 days.`,
            example: 'https://www.canva.com/api/design/{token}/edit',
            type: 'string'
        },
        view_url: {
            description: `A temporary viewing URL for the design.

NOTE: This is not a permanent URL, it is only valid for 30 days.
`,
            example: 'https://www.canva.com/api/design/{token}/view',
            type: 'string'
        }
    },
    required: ['edit_url', 'view_url'],
    type: 'object'
} as const;

export const $DesignSummary = {
    description: "Basic details about the design, such as the design's ID, title, and URL.",
    properties: {
        id: {
            description: 'The design ID.',
            example: 'DAFVztcvd9z',
            type: 'string'
        },
        title: {
            description: 'The design title.',
            example: 'My summer holiday',
            type: 'string'
        },
        url: {
            description: 'URL of the design.',
            example: 'https://www.canva.com/design/DAFVztcvd9z/edit',
            type: 'string'
        },
        thumbnail: {
            '$ref': '#/components/schemas/Thumbnail'
        }
    },
    type: 'object'
} as const;

export const $DesignImportMetadata = {
    description: 'Metadata about the design that you include as a header parameter when importing a design.',
    properties: {
        title_base64: {
            description: `The design's title, encoded in Base64.

The maximum length of a design title in Canva (unencoded) is 50 characters.

Base64 encoding allows titles containing emojis and other special
characters to be sent using HTTP headers.
For example, "My Awesome Design 😍" Base64 encoded
is \`TXkgQXdlc29tZSBEZXNpZ24g8J+YjQ==\`.`,
            example: 'TXkgQXdlc29tZSBEZXNpZ24g8J+YjQ==',
            minLength: 1,
            type: 'string'
        }
    },
    required: ['title_base64'],
    type: 'object'
} as const;

export const $CreateDesignImportJobResponse = {
    properties: {
        job_id: {
            description: 'The design import job ID.',
            example: 'f81b26fd-a33d-4c2d-9e8c-4a7aca798b17',
            type: 'string'
        }
    },
    required: ['job_id'],
    type: 'object'
} as const;

export const $DesignImportStatus = {
    description: 'The status of the design import.',
    properties: {
        state: {
            '$ref': '#/components/schemas/DesignImportStatusState'
        },
        error: {
            '$ref': '#/components/schemas/DesignImportError'
        }
    },
    required: ['state'],
    type: 'object'
} as const;

export const $DesignImportStatusState = {
    description: 'State of the design import job.',
    enum: ['failed', 'importing', 'success'],
    example: 'success',
    type: 'string'
} as const;

export const $DesignImportError = {
    description: 'Information about why the import failed.',
    properties: {
        code: {
            '$ref': '#/components/schemas/DesignImportErrorCode'
        },
        message: {
            description: 'A human-readable description of why the import failed.',
            example: "We're sorry, but the file upload quota has been exceeded. Please try again later.",
            type: 'string'
        }
    },
    required: ['code', 'message'],
    type: 'object'
} as const;

export const $DesignImportErrorCode = {
    description: `A short string about why the import failed. You can programmatically
handle errors using this field.`,
    enum: ['design_creation_throttled', 'design_import_throttled', 'duplicate_import', 'internal_server_error', 'invalid_file'],
    example: 'design_creation_throttled',
    type: 'string'
} as const;

export const $GetDesignImportJobResponse = {
    properties: {
        job_id: {
            description: 'The design import job ID.',
            example: 'f81b26fd-a33d-4c2d-9e8c-4a7aca798b17',
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/DesignImportStatus'
        },
        designs: {
            description: `A list of designs imported from the external file. It usually contains one item.
Imports with a large number of pages or assets are split into multiple designs.`,
            items: {
                '$ref': '#/components/schemas/Design'
            },
            type: 'array'
        }
    },
    required: ['job_id', 'status'],
    type: 'object'
} as const;

export const $DesignTypeInput = {
    description: 'The desired design type.',
    discriminator: {
        mapping: {
            preset: '#/components/schemas/PresetDesignTypeInput',
            custom: '#/components/schemas/CustomDesignTypeInput'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/PresetDesignTypeInput'
        },
        {
            '$ref': '#/components/schemas/CustomDesignTypeInput'
        }
    ],
    type: 'object'
} as const;

export const $PresetDesignTypeInput = {
    description: 'Provide the common design type.',
    properties: {
        type: {
            enum: ['preset'],
            type: 'string'
        },
        name: {
            '$ref': '#/components/schemas/PresetDesignTypeName'
        }
    },
    required: ['name', 'type'],
    type: 'object'
} as const;

export const $PresetDesignTypeName = {
    description: `The name of the design type. This can be one of the following:

- \`doc\`: A [Canva doc](https://www.canva.com/docs/); a document for Canva's online text editor.
- \`whiteboard\`: A [whiteboard](https://www.canva.com/online-whiteboard/); a design which gives you infinite space to collaborate.
- \`presentation\`: A [presentation](https://www.canva.com/presentations/); lets you create and collaborate for presenting to an audience.`,
    enum: ['doc', 'whiteboard', 'presentation'],
    type: 'string'
} as const;

export const $CustomDesignTypeInput = {
    description: 'Provide the width and height to define a custom design type.',
    properties: {
        type: {
            enum: ['custom'],
            type: 'string'
        },
        width: {
            description: 'The width of the design (in pixels). Minimum 40px, maximum 8000px.',
            example: 320,
            type: 'integer'
        },
        height: {
            description: 'The height of the design (in pixels). Minimum 40px, maximum 8000px.',
            example: 200,
            type: 'integer'
        }
    },
    required: ['height', 'type', 'width'],
    type: 'object'
} as const;

export const $Error = {
    properties: {
        code: {
            '$ref': '#/components/schemas/ErrorCode'
        },
        message: {
            description: 'A human-readable description of what went wrong.',
            type: 'string'
        }
    },
    required: ['code', 'message'],
    type: 'object'
} as const;

export const $OauthError = {
    properties: {
        error: {
            '$ref': '#/components/schemas/ErrorCode'
        },
        error_description: {
            description: 'A human-readable description of what went wrong.',
            type: 'string'
        }
    },
    required: ['error', 'error_description'],
    type: 'object'
} as const;

export const $ErrorCode = {
    description: `A short string indicating what failed. This field can be used to handle errors programmatically.
`,
    enum: ['internal_error', 'invalid_field', 'invalid_header_value', 'permission_denied', 'too_many_requests', 'not_found', 'bad_request_body', 'bad_http_method', 'bad_request_params', 'bad_query_params', 'endpoint_not_found', 'unsupported_version', 'invalid_access_token', 'revoked_access_token', 'missing_field', 'missing_scope', 'invalid_grant', 'invalid_request', 'invalid_client', 'unauthorized_client', 'unsupported_grant_type', 'invalid_scope', 'invalid_basic_header', 'invalid_file_format', 'quota_exceeded', 'unsupported_content_type', 'request_too_large', 'folder_not_found', 'asset_not_found', 'max_limit_reached', 'permission_not_found', 'permission_exists', 'unauthorized_user', 'user_not_found', 'group_not_found', 'app_not_found', 'content_not_found', 'doctype_not_found', 'design_not_found', 'design_type_not_found', 'team_not_found', 'comment_not_found', 'too_many_comments', 'too_many_replies', 'message_too_long', 'design_not_fillable', 'autofill_data_invalid', 'feature_not_available', 'license_required'],
    type: 'string'
} as const;

export const $CreateDesignExportJobRequest = {
    description: `Body parameters for starting an export job for a design.
It must include a design ID, and one of the supported export formats.`,
    example: {
        design_id: 'DAVZr1z5464',
        format: {
            type: 'pdf',
            size: 'A4',
            pages: [2, 3, 4]
        }
    },
    properties: {
        design_id: {
            description: 'The design ID.',
            type: 'string'
        },
        format: {
            '$ref': '#/components/schemas/ExportFormat'
        }
    },
    required: ['design_id', 'format'],
    type: 'object'
} as const;

export const $ExportFormat = {
    description: 'Details about the desired export format.',
    discriminator: {
        mapping: {
            pdf: '#/components/schemas/PdfExportFormat',
            jpg: '#/components/schemas/JpgExportFormat',
            png: '#/components/schemas/PngExportFormat',
            pptx: '#/components/schemas/PptxExportFormat',
            gif: '#/components/schemas/GifExportFormat',
            mp4: '#/components/schemas/Mp4ExportFormat'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/PdfExportFormat'
        },
        {
            '$ref': '#/components/schemas/JpgExportFormat'
        },
        {
            '$ref': '#/components/schemas/PngExportFormat'
        },
        {
            '$ref': '#/components/schemas/PptxExportFormat'
        },
        {
            '$ref': '#/components/schemas/GifExportFormat'
        },
        {
            '$ref': '#/components/schemas/Mp4ExportFormat'
        }
    ],
    type: 'object'
} as const;

export const $PdfExportFormat = {
    description: 'Export the design as a PDF. Providing a paper size is optional. The default paper size is A4.',
    properties: {
        type: {
            enum: ['pdf'],
            type: 'string'
        },
        export_quality: {
            '$ref': '#/components/schemas/ExportQuality'
        },
        size: {
            '$ref': '#/components/schemas/ExportPageSize'
        },
        pages: {
            description: `To specify which pages to export in a multi-page design, provide the page numbers as
an array. The first page in a design is page \`1\`.
If \`pages\` isn't specified, all the pages are exported.`,
            example: [2, 3, 4],
            items: {
                minimum: 1,
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $GifExportFormat = {
    description: `Export the design as a GIF. Height or width (or both) may be specified, otherwise the file
will be exported at it's default size. Large designs will be scaled down, and aspect ratio
will always be maintained.`,
    properties: {
        type: {
            enum: ['gif'],
            type: 'string'
        },
        export_quality: {
            '$ref': '#/components/schemas/ExportQuality'
        },
        height: {
            description: `Specify the height in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
            example: 400,
            format: 'int32',
            maximum: 25000,
            minimum: 40,
            type: 'integer'
        },
        width: {
            description: `Specify the width in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
            example: 400,
            format: 'int32',
            maximum: 25000,
            minimum: 40,
            type: 'integer'
        },
        pages: {
            description: `To specify which pages to export in a multi-page design, provide the page numbers as
an array. The first page in a design is page \`1\`.
If \`pages\` isn't specified, all the pages are exported.`,
            example: [2, 3, 4],
            items: {
                minimum: 1,
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $JpgExportFormat = {
    description: `Export the design as a JPG. Compression quality must be provided. Height or width (or both)
may be specified, otherwise the file will be exported at it's default size.`,
    properties: {
        type: {
            enum: ['jpg'],
            type: 'string'
        },
        export_quality: {
            '$ref': '#/components/schemas/ExportQuality'
        },
        quality: {
            description: 'For the `JPG` type, the `quality` of the exported JPEG determines how compressed the exported file should be. A _low_ `quality` value (minimum `1`) will create a file with a smaller file size, but the resulting file will have pixelated artifacts when compared to a file created with a _high_ `quality` value (maximum `100`).',
            example: 80,
            maximum: 100,
            minimum: 1,
            type: 'integer'
        },
        height: {
            description: `Specify the height in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
            example: 400,
            format: 'int32',
            maximum: 25000,
            minimum: 40,
            type: 'integer'
        },
        width: {
            description: `Specify the width in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
            example: 400,
            format: 'int32',
            maximum: 25000,
            minimum: 40,
            type: 'integer'
        },
        pages: {
            description: `To specify which pages to export in a multi-page design, provide the page numbers as
an array. The first page in a design is page \`1\`.
If \`pages\` isn't specified, all the pages are exported.`,
            example: [2, 3, 4],
            items: {
                minimum: 1,
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['quality', 'type'],
    type: 'object'
} as const;

export const $PngExportFormat = {
    description: `Export the design as a PNG. Height or width (or both) may be specified, otherwise
the file will be exported at it's default size. You may also specify whether to export the
file losslessly, and whether to export a multi-page design as a single image.`,
    properties: {
        type: {
            enum: ['png'],
            type: 'string'
        },
        export_quality: {
            '$ref': '#/components/schemas/ExportQuality'
        },
        height: {
            description: `Specify the height in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
            example: 400,
            format: 'int32',
            maximum: 25000,
            minimum: 40,
            type: 'integer'
        },
        width: {
            description: `Specify the width in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
            example: 400,
            format: 'int32',
            maximum: 25000,
            minimum: 40,
            type: 'integer'
        },
        lossless: {
            default: false,
            description: `When \`true\`, the PNG is compressed with a lossless compression algorithm (\`false\` by
default).`,
            type: 'boolean'
        },
        as_single_image: {
            default: false,
            description: `When \`true\`, multi-page designs are merged into a single image.
When \`false\` (default), each page is exported as a separate image.`,
            type: 'boolean'
        },
        pages: {
            description: `To specify which pages to export in a multi-page design, provide the page numbers as
an array. The first page in a design is page \`1\`.
If \`pages\` isn't specified, all the pages are exported.`,
            example: [2, 3, 4],
            items: {
                minimum: 1,
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $PptxExportFormat = {
    description: 'Export the design as a PPTX.',
    properties: {
        type: {
            enum: ['pptx'],
            type: 'string'
        },
        pages: {
            description: `To specify which pages to export in a multi-page design, provide the page numbers as
an array. The first page in a design is page \`1\`.
If \`pages\` isn't specified, all the pages are exported.`,
            example: [2, 3, 4],
            items: {
                minimum: 1,
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $Mp4ExportFormat = {
    description: 'Export the design as an MP4. You must specify the quality of the exported video.',
    properties: {
        type: {
            enum: ['mp4'],
            type: 'string'
        },
        export_quality: {
            '$ref': '#/components/schemas/ExportQuality'
        },
        quality: {
            '$ref': '#/components/schemas/Mp4ExportQuality'
        },
        pages: {
            description: `To specify which pages to export in a multi-page design, provide the page numbers as
an array. The first page in a design is page \`1\`.
If \`pages\` isn't specified, all the pages are exported.`,
            example: [2, 3, 4],
            items: {
                minimum: 1,
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['quality', 'type'],
    type: 'object'
} as const;

export const $CreateDesignExportJobResponse = {
    example: {
        job: {
            id: 1332472403399775200,
            status: 'in_progress'
        }
    },
    properties: {
        job: {
            '$ref': '#/components/schemas/ExportJob'
        }
    },
    required: ['job'],
    type: 'object'
} as const;

export const $GetDesignExportJobResponse = {
    example: {
        job: {
            id: 1332472403399775200,
            status: 'success',
            urls: ['https://export-download.canva-dev.com/...']
        }
    },
    properties: {
        job: {
            '$ref': '#/components/schemas/ExportJob'
        }
    },
    required: ['job'],
    type: 'object'
} as const;

export const $ExportJob = {
    description: 'The status of the export job.',
    properties: {
        id: {
            description: 'The export job ID.',
            example: '1332472403399775200',
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/DesignExportStatus'
        },
        urls: {
            description: `When the export job is completed, also returns a list of urls for the exported
resources. The list is sorted by page order.`,
            example: ['https://export-download.canva-dev.com/...'],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        error: {
            '$ref': '#/components/schemas/ExportError'
        }
    },
    required: ['id', 'status'],
    type: 'object'
} as const;

export const $ExportPageSize = {
    description: 'The paper size of the export PDF file. The `size` attribute is only supported for Documents (Canva Docs).',
    enum: ['a4', 'a3', 'letter', 'legal'],
    example: 'a4',
    type: 'string'
} as const;

export const $DesignExportStatus = {
    description: `The export status of the job. A newly created job will be \`in_progress\` and will eventually
become \`success\` or \`failed\`.`,
    enum: ['failed', 'in_progress', 'success'],
    type: 'string'
} as const;

export const $ExportHeight = {
    description: `Specify the height in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
    example: 400,
    format: 'int32',
    maximum: 25000,
    minimum: 40,
    type: 'integer'
} as const;

export const $ExportWidth = {
    description: `Specify the width in pixels of the exported image. If only one of height or width is
specified, then the image will be scaled to match that dimension, respecting the design's
aspect ratio. If no width or height is specified, the image will be exported using the
dimensions of the design.`,
    example: 400,
    format: 'int32',
    maximum: 25000,
    minimum: 40,
    type: 'integer'
} as const;

export const $Mp4ExportQuality = {
    description: `The orientation and resolution of the exported video. Orientation is either \`horizontal\` or
\`vertical\`, and resolution is one of \`480p\`, \`720p\`, \`1080p\` or \`4k\`.`,
    enum: ['horizontal_480p', 'horizontal_720p', 'horizontal_1080p', 'horizontal_4k', 'vertical_480p', 'vertical_720p', 'vertical_1080p', 'vertical_4k'],
    type: 'string'
} as const;

export const $ExportError = {
    description: 'If the export fails, this object provides details about the error.',
    properties: {
        code: {
            '$ref': '#/components/schemas/ExportErrorCode'
        },
        message: {
            description: 'A human-readable description of what went wrong.',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $ExportErrorCode = {
    description: `If the export failed, this specifies the reason why it failed. This can be one of the following:

- \`license_required\`: The design contains [premium elements](https://www.canva.com/help/premium-elements/) that haven't been purchased. You can either buy the elements or upgrade to a Canva plan (such as Canva Pro) that has premium features, then try again. Alternatively, you can set \`export_quality\` to \`regular\` to export your document in regular quality.
- \`internal_failure\`: The service encountered an error when exporting your design.`,
    enum: ['license_required', 'internal_failure'],
    type: 'string'
} as const;

export const $ExportQuality = {
    default: 'regular',
    description: `Specifies the export quality of the design. This can be one of the following:
- \`regular\`: Regular quality export. This is the default.
- \`pro\`: Premium quality export.

  NOTE: A \`pro\` export might fail if the design contains [premium elements](https://www.canva.com/help/premium-elements/) and the calling user either hasn't purchased the elements or isn't on a Canva plan (such as Canva Pro) that has premium features.`,
    enum: ['pro', 'regular'],
    type: 'string'
} as const;

export const $GetFolderResponse = {
    description: 'The folder ID.',
    properties: {
        folder: {
            '$ref': '#/components/schemas/Folder'
        }
    },
    required: ['folder'],
    type: 'object'
} as const;

export const $CreateFolderRequest = {
    description: 'Body parameters for creating a new folder.',
    properties: {
        name: {
            description: 'The name of the folder. Must be less than 256 characters.',
            example: 'My awesome holiday',
            maxLength: 255,
            minLength: 1,
            type: 'string'
        },
        parent_folder_id: {
            description: `The folder ID of the parent folder. To create a new folder at the top level of a user's
[projects](https://www.canva.com/help/find-designs-and-folders/), use the ID \`root\`.`,
            example: 'FAF2lZtloor',
            maxLength: 50,
            minLength: 1,
            type: 'string'
        }
    },
    required: ['name', 'parent_folder_id'],
    type: 'object'
} as const;

export const $CreateFolderResponse = {
    description: 'Details about the new folder.',
    properties: {
        folder: {
            '$ref': '#/components/schemas/Folder'
        }
    },
    type: 'object'
} as const;

export const $UpdateFolderRequest = {
    description: "Body parameters for updating the folder's details.",
    properties: {
        name: {
            description: 'The folder name, as shown in the Canva UI.',
            example: 'My awesome holiday',
            maxLength: 250,
            minLength: 1,
            type: 'string'
        }
    },
    required: ['name'],
    type: 'object'
} as const;

export const $UpdateFolderResponse = {
    description: 'Details about the updated folder.',
    properties: {
        folder: {
            '$ref': '#/components/schemas/Folder'
        }
    },
    type: 'object'
} as const;

export const $ListFolderItemsResponse = {
    description: `A list of the items in a folder.
If the success response contains a continuation token, the folder contains more items
you can list. You can use this token as a query parameter and retrieve more
items from the list, for example
\`/v1/folders/{folderId}/items?continuation={continuation}\`.

To retrieve all the items in a folder, you might need to make multiple requests.`,
    properties: {
        items: {
            description: 'An array of items in the folder.',
            items: {
                '$ref': '#/components/schemas/FolderItemSummary'
            },
            type: 'array'
        },
        continuation: {
            description: `If the success response contains a continuation token, the folder contains more items
you can list. You can use this token as a query parameter and retrieve more
items from the list, for example
\`/v1/folders/{folderId}/items?continuation={continuation}\`.

To retrieve all the items in a folder, you might need to make multiple requests.`,
            example: 'RkFGMgXlsVTDbMd:MR3L0QjiaUzycIAjx0yMyuNiV0OildoiOwL0x32G4NjNu4FwtAQNxowUQNMMYN',
            type: 'string'
        }
    },
    required: ['items'],
    type: 'object'
} as const;

export const $FolderItemSummary = {
    description: 'Details about the folder item.',
    discriminator: {
        mapping: {
            asset: '#/components/schemas/AssetItem',
            folder: '#/components/schemas/FolderItem',
            design: '#/components/schemas/DesignItem',
            template: '#/components/schemas/TemplateItem'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/AssetItem'
        },
        {
            '$ref': '#/components/schemas/FolderItem'
        },
        {
            '$ref': '#/components/schemas/DesignItem'
        },
        {
            '$ref': '#/components/schemas/TemplateItem'
        }
    ],
    type: 'object'
} as const;

export const $AssetItem = {
    description: 'Details about the asset.',
    properties: {
        type: {
            enum: ['asset'],
            type: 'string'
        },
        asset: {
            '$ref': '#/components/schemas/Asset'
        }
    },
    required: ['asset', 'type'],
    type: 'object'
} as const;

export const $FolderItem = {
    description: 'Details about the folder.',
    properties: {
        type: {
            enum: ['folder'],
            type: 'string'
        },
        folder: {
            '$ref': '#/components/schemas/Folder'
        }
    },
    required: ['folder', 'type'],
    type: 'object'
} as const;

export const $DesignItem = {
    description: 'Details about the design.',
    properties: {
        type: {
            enum: ['design'],
            type: 'string'
        },
        design: {
            '$ref': '#/components/schemas/Design'
        }
    },
    required: ['design', 'type'],
    type: 'object'
} as const;

export const $TemplateItem = {
    description: 'Details about the template.',
    properties: {
        type: {
            enum: ['template'],
            type: 'string'
        },
        template: {
            '$ref': '#/components/schemas/Template'
        }
    },
    required: ['template', 'type'],
    type: 'object'
} as const;

export const $MoveFolderItemRequest = {
    description: 'Body parameters for moving the folder.',
    properties: {
        from_folder_id: {
            description: `The ID of the folder that contains the item you want to move (the source folder).
If the item is in the top level of a Canva user's
[projects](https://www.canva.com/help/find-designs-and-folders/), use the ID \`root\`.`,
            example: 'root',
            maxLength: 50,
            minLength: 1,
            type: 'string'
        },
        to_folder_id: {
            description: `The ID of the folder you want to move the item to (the destination folder).
If you want to move the item to the top level of a Canva user's
[projects](https://www.canva.com/help/find-designs-and-folders/), use the ID \`root\`.`,
            example: 'FAF2lZtloor',
            maxLength: 50,
            minLength: 1,
            type: 'string'
        },
        item_id: {
            description: 'The ID of the item you want to move.',
            example: 'Msd59349ff',
            maxLength: 50,
            minLength: 1,
            type: 'string'
        }
    },
    required: ['from_folder_id', 'item_id', 'to_folder_id'],
    type: 'object'
} as const;

export const $Folder = {
    description: 'The folder object, which contains metadata about the folder.',
    properties: {
        id: {
            description: 'The folder ID.',
            example: 'FAF2lZtloor',
            type: 'string'
        },
        name: {
            description: 'The folder name.',
            example: 'My awesome holiday',
            type: 'string'
        },
        created_at: {
            description: `When the folder was created, as a Unix timestamp (in seconds since the
Unix Epoch).`,
            example: 1377396000,
            format: 'int64',
            type: 'integer'
        },
        updated_at: {
            description: `When the folder was last updated, as a Unix timestamp (in seconds since the
Unix Epoch).`,
            example: 1692928800,
            format: 'int64',
            type: 'integer'
        },
        thumbnail: {
            '$ref': '#/components/schemas/Thumbnail'
        }
    },
    required: ['created_at', 'id', 'name', 'updated_at'],
    type: 'object'
} as const;

export const $FolderSummary = {
    description: `This object contains some folder metadata. You can retrieve additional metadata
using the folder ID and the \`/v1/folders/{folderId}\` endpoint.`,
    properties: {
        id: {
            description: 'The folder ID.',
            example: 'FAF2lZtloor',
            type: 'string'
        },
        title: {
            description: 'The folder name, as shown in the Canva UI.',
            example: 'My awesome holiday',
            type: 'string'
        },
        url: {
            description: 'The folder URL.',
            example: 'https://www.canva.com/folder/FAF2lZtloor',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $Group = {
    description: `Metadata for the Canva Group, consisting of the Group ID,
display name, and whether it's an external Canva Group.`,
    properties: {
        id: {
            description: 'The ID of the group with permissions to access the design.',
            example: 'dl9n9SoWoExMsw6Ri1iTg',
            type: 'string'
        },
        display_name: {
            description: 'The display name of the group.',
            example: 'Sales team',
            type: 'string'
        },
        external: {
            description: `Is the user making the API call (the authenticated user) and the Canva Group
from different Canva Teams?

- When \`true\`, the user and the group aren't in the same Canva Team.
- When \`false\`, the user and the group are in the same Canva Team.`,
            type: 'boolean'
        }
    },
    required: ['external', 'id'],
    type: 'object'
} as const;

export const $ExchangeAccessTokenRequest = {
    discriminator: {
        mapping: {
            authorization_code: '#/components/schemas/ExchangeAuthCodeRequest',
            refresh_token: '#/components/schemas/ExchangeRefreshTokenRequest'
        },
        propertyName: 'grant_type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/ExchangeAuthCodeRequest'
        },
        {
            '$ref': '#/components/schemas/ExchangeRefreshTokenRequest'
        }
    ],
    type: 'object'
} as const;

export const $ExchangeAuthCodeRequest = {
    properties: {
        grant_type: {
            description: 'For exchanging an authorization code for an access token.',
            enum: ['authorization_code'],
            example: 'authorization_code',
            type: 'string'
        },
        code_verifier: {
            description: 'The `code_verifier` value that you generated when creating the user authorization URL.',
            example: 'i541qdcfkb4htnork0w92lnu43en99ls5a48ittv6udqgiflqon8vusojojakbq4',
            type: 'string'
        },
        code: {
            description: 'The authorization code you received after the user authorized the integration.',
            example: 'kp8nnroja7qnx00.opyc1p76rcbyflsxbycjqfp3ub8vzsvltpzwafy9q5l45dn5fxzhe7i7a6mg1i2t8jpsa6sebdeumkzzhicskabgevrxsssec4dvjwfvhq4gs3ugghguar0voiqpfb7axsapiojoter8v3w2s5s3st84jpv2l06h667iw241xngy9c8=vu1tnjp7sz',
            type: 'string'
        },
        client_id: {
            description: `Your integration's unique ID, for authenticating the request.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'OC-FAB12-AbCdEf',
            type: 'string'
        },
        client_secret: {
            description: `Your integration's client secret, for authenticating the request. Begins with \`cnvca\`.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'cnvcaAbcdefg12345_hijklm6789',
            type: 'string'
        },
        redirect_uri: {
            description: `Only required if a redirect URL was supplied when you [created the user authorization URL](https://www.canva.dev/docs/connect/authentication/#create-the-authorization-url).

Must be one of those already specified by the client. If not supplied, the first redirect_uri defined for the client will be used by default.
`,
            example: 'https://example.com/process-auth',
            type: 'string'
        }
    },
    required: ['code', 'code_verifier', 'grant_type'],
    type: 'object'
} as const;

export const $ExchangeRefreshTokenRequest = {
    properties: {
        grant_type: {
            description: 'For generating an access token using a refresh token.',
            enum: ['refresh_token'],
            example: 'refresh_token',
            type: 'string'
        },
        client_id: {
            description: `Your integration's unique ID, for authenticating the request.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'OC-FAB12-AbCdEf',
            type: 'string'
        },
        client_secret: {
            description: `Your integration's client secret, for authenticating the request. Begins with \`cnvca\`.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'cnvcaAbcdefg12345_hijklm6789',
            type: 'string'
        },
        refresh_token: {
            description: 'The refresh token to be exchanged. You can copy this value from the successful response received when generating an access token.',
            example: 'JABix5nolsk9k8n2r0f8nq1gw4zjo40ht6sb4i573wgdzmkwdmiy6muh897hp0bxyab276wtgqkvtob2mg9aidt5d6rcltcbcgs101',
            type: 'string'
        },
        scope: {
            description: `Optional scope value when refreshing an access token. Separate multiple [scopes](https://www.canva.dev/docs/connect/appendix/scopes/) with a single space between each scope.

The requested scope cannot include any permissions not already granted, so this parameter allows you to limit the scope when refreshing a token. If omitted, the scope for the token remains unchanged.
`,
            example: 'design:meta:read',
            type: 'string'
        }
    },
    required: ['grant_type', 'refresh_token'],
    type: 'object'
} as const;

export const $ExchangeAccessTokenResponse = {
    description: 'Exchange auth token to access token.',
    properties: {
        access_token: {
            description: 'The bearer access token to use to authenticate to Canva Connect API endpoints. If requested using a `authorization_code` or `refresh_token`, this allows you to act on behalf of a user.',
            example: 'JagALLazU0i2ld9WW4zTO4kaG0lkvP8Y5sSO206ZwxNF4E1y3xKJKF7TzN17BXTfaNOeY0P88AeRCE6cRF7SJzvf3Sx97rA80sGHtFplFo',
            type: 'string'
        },
        refresh_token: {
            description: 'The token that you can use to refresh the access token.',
            example: 'JABix5nolsk9k8n2r0f8nq1gw4zjo40ht6sb4i573wgdzmkwdmiy6muh897hp0bxyab276wtgqkvtob2mg9aidt5d6rcltcbcgs101',
            type: 'string'
        },
        token_type: {
            description: 'The token type returned. This is always `Bearer`.',
            example: 'Bearer',
            type: 'string'
        },
        expires_in: {
            description: 'The expiry time (in seconds) for the token.',
            example: 14400,
            format: 'int64',
            type: 'integer'
        },
        scope: {
            description: 'The [scopes](https://www.canva.dev/docs/connect/appendix/scopes/) that the token has been granted.',
            example: 'asset:read design:meta:read design:permission:read folder:read',
            type: 'string'
        }
    },
    required: ['access_token', 'expires_in', 'refresh_token', 'token_type'],
    type: 'object'
} as const;

export const $IntrospectTokenRequest = {
    properties: {
        token: {
            description: 'The token to introspect.',
            example: 'JagALLazU0i2ld9WW4zTO4kaG0lkvP8Y5sSO206ZwxNF4E1y3xKJKF7TzN17BXTfaNOeY0P88AeRCE6cRF7SJzvf3Sx97rA80sGHtFplFo',
            type: 'string'
        },
        client_id: {
            description: `Your integration's unique ID, for authenticating the request.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'OC-FAB12-AbCdEf',
            type: 'string'
        },
        client_secret: {
            description: `Your integration's client secret, for authenticating the request. Begins with \`cnvca\`.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'cnvcaAbcdefg12345_hijklm6789',
            type: 'string'
        }
    },
    required: ['token'],
    type: 'object'
} as const;

export const $IntrospectTokenResponse = {
    description: 'Introspection result of access or refresh tokens',
    properties: {
        active: {
            description: `Whether the access token is active.

If \`true\`, the access token is valid and active. If \`false\`, the access token is invalid.
`,
            example: true,
            type: 'boolean'
        },
        scope: {
            description: 'The [scopes](https://www.canva.dev/docs/connect/appendix/scopes/) that the token has been granted.',
            example: 'asset:read design:meta:read design:permission:read folder:read',
            type: 'string'
        },
        client: {
            description: 'The ID of the client that requested the token.',
            example: 'OC-FAB12-AbCdEf',
            type: 'string'
        },
        exp: {
            description: 'The expiration time of the token, as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time) in seconds.',
            example: 1712216144,
            format: 'int64',
            type: 'integer'
        },
        iat: {
            description: 'When the token was issued, as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time) in seconds.',
            example: 1712201744,
            format: 'int64',
            type: 'integer'
        },
        nbf: {
            description: 'The "not before" time of the token, which specifies the time before which the access token most not be accepted, as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time) in seconds.',
            example: 1712201744,
            format: 'int64',
            type: 'integer'
        },
        jti: {
            description: 'A unique ID for the access token.',
            example: 'AbC1d-efgHIJKLMN2oPqrS',
            type: 'string'
        },
        sub: {
            description: `The subject of the claim. This is the ID of the Canva user that the access token acts on behalf of.

This is an obfuscated value, so a single user has a unique ID for each integration. If the same user authorizes another integration, their ID in that other integration is different.
`,
            example: 'oBCdEF1Gh2i3jkLmno-pq',
            type: 'string'
        }
    },
    required: ['active'],
    type: 'object'
} as const;

export const $RevokeTokensRequest = {
    description: 'Supply an access token or refresh token to have its lineage revoked.',
    properties: {
        token: {
            description: 'The token to revoke.',
            example: 'agALLazU0i2ld9WW4zTO4kaG0lkvP8Y5sSO206ZwxNF4E1y3xKJKF7TzN17BXTfaNOeY0P88AeRCE6cRF7SJzvf3Sx97rA80sGHtFplFo',
            type: 'string'
        },
        client_id: {
            description: `Your integration's unique ID, for authenticating the request.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'OC-FAB12-AbCdEf',
            type: 'string'
        },
        client_secret: {
            description: `Your integration's client secret, for authenticating the request. Begins with \`cnvca\`.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
            example: 'cnvcaAbcdefg12345_hijklm6789',
            type: 'string'
        }
    },
    required: ['token'],
    type: 'object'
} as const;

export const $scope_response = {
    description: 'The [scopes](https://www.canva.dev/docs/connect/appendix/scopes/) that the token has been granted.',
    example: 'asset:read design:meta:read design:permission:read folder:read',
    type: 'string'
} as const;

export const $client_id = {
    description: `Your integration's unique ID, for authenticating the request.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
    example: 'OC-FAB12-AbCdEf',
    type: 'string'
} as const;

export const $client_secret = {
    description: `Your integration's client secret, for authenticating the request. Begins with \`cnvca\`.

NOTE: We recommend that you use basic access authentication instead of specifying \`client_id\` and \`client_secret\` as body parameters.
`,
    example: 'cnvcaAbcdefg12345_hijklm6789',
    type: 'string'
} as const;

export const $Team = {
    description: `Metadata for the Canva Team, consisting of the Team ID,
display name, and whether it's an external Canva Team.`,
    properties: {
        id: {
            description: 'The ID of the Canva Team.',
            example: 'Oi2RJILTrKk0KRhRUZozX',
            type: 'string'
        },
        display_name: {
            description: 'The name of the Canva Team as shown in the Canva UI.',
            example: 'Acme Corporation',
            type: 'string'
        },
        external: {
            description: `Is the user making the API call (the authenticated user) from the Canva Team shown?

- When \`true\`, the user isn't in the Canva Team shown.
- When \`false\`, the user is in the Canva Team shown.`,
            type: 'boolean'
        }
    },
    required: ['display_name', 'external', 'id'],
    type: 'object'
} as const;

export const $Template = {
    description: 'The template object, which contains metadata about the template.',
    properties: {
        id: {
            description: 'The template ID.',
            example: 'TEMzWSwy3BI',
            type: 'string'
        },
        title: {
            description: 'The template title, as shown in the Canva UI.',
            example: 'My posts template',
            type: 'string'
        },
        url: {
            description: 'A URL Canva users can visit to create a new design from this template.',
            example: 'https://www.canva.com/templates/EADao7wZnAA-black-white-simple-quote-instagram-post/',
            type: 'string'
        },
        thumbnails: {
            description: 'A list of thumbnail images representing the template. This list contains one thumbnail for each page of the template.',
            items: {
                '$ref': '#/components/schemas/Thumbnail'
            },
            type: 'array'
        }
    },
    required: ['id', 'thumbnails', 'title', 'url'],
    type: 'object'
} as const;

export const $Thumbnail = {
    description: 'A thumbnail image representing the object.',
    properties: {
        width: {
            description: 'The width of the thumbnail image in pixels.',
            example: 595,
            type: 'integer'
        },
        height: {
            description: 'The height of the thumbnail image in pixels.',
            example: 335,
            type: 'integer'
        },
        url: {
            description: `A URL for retrieving the thumbnail image.
This URL expires after 15 minutes. This URL includes a query string
that's required for retrieving the thumbnail.`,
            example: 'https://document-export.canva.com/Vczz9/zF9vzVtdADc/2/thumbnail/0001.png?<query-string>',
            type: 'string'
        }
    },
    required: ['height', 'url', 'width'],
    type: 'object'
} as const;

export const $User = {
    description: 'Metadata for the user, consisting of the User ID and display name.',
    properties: {
        id: {
            description: 'The ID of the user.',
            example: 'uKakKUfI03Fg8k2gZ6OkT',
            type: 'string'
        },
        display_name: {
            description: 'The name of the user as shown in the Canva UI.',
            example: 'John Doe',
            type: 'string'
        }
    },
    required: ['id'],
    type: 'object'
} as const;

export const $TeamUserSummary = {
    description: 'Metadata for the user, consisting of the User ID and Team ID.',
    properties: {
        user_id: {
            description: 'The ID of the user.',
            example: 'auDAbliZ2rQNNOsUl5OLu',
            type: 'string'
        },
        team_id: {
            description: "The ID of the user's Canva Team.",
            example: 'Oi2RJILTrKk0KRhRUZozX',
            type: 'string'
        }
    },
    required: ['team_id', 'user_id'],
    type: 'object'
} as const;

export const $TeamUser = {
    description: 'Metadata for the user, consisting of the User ID, Team ID, and display name.',
    properties: {
        user_id: {
            description: 'The ID of the user.',
            example: 'auDAbliZ2rQNNOsUl5OLu',
            type: 'string'
        },
        team_id: {
            description: "The ID of the user's Canva Team.",
            example: 'Oi2RJILTrKk0KRhRUZozX',
            type: 'string'
        },
        display_name: {
            description: 'The name of the user as shown in the Canva UI.',
            example: 'Jane Doe',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $UserProfile = {
    description: 'Profile for the user, consisting of the display name and other attributes.',
    properties: {
        display_name: {
            description: 'The name of the user as shown in the Canva UI.',
            example: 'Jane Doe',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $UsersMeResponse = {
    properties: {
        team_user: {
            '$ref': '#/components/schemas/TeamUserSummary'
        }
    },
    required: ['team_user'],
    type: 'object'
} as const;

export const $UserProfileResponse = {
    properties: {
        profile: {
            '$ref': '#/components/schemas/UserProfile'
        }
    },
    required: ['profile'],
    type: 'object'
} as const;

export const $Notification = {
    properties: {
        id: {
            description: 'The unique identifier for the notification.',
            example: 'eb595730',
            type: 'string'
        },
        created_at: {
            description: `When the notification was created, as a UNIX timestamp (in seconds
since the UNIX epoch).`,
            example: 1377396000,
            format: 'int64',
            type: 'integer'
        },
        content: {
            '$ref': '#/components/schemas/NotificationContent'
        }
    },
    required: ['content', 'created_at', 'id'],
    type: 'object'
} as const;

export const $NotificationContent = {
    description: 'The notification content object, which contains metadata about the event.',
    discriminator: {
        mapping: {
            share_design: '#/components/schemas/ShareDesignNotificationContent',
            share_folder: '#/components/schemas/ShareFolderNotificationContent',
            comment: '#/components/schemas/CommentNotificationContent',
            design_access_requested: '#/components/schemas/DesignAccessRequestedNotificationContent',
            design_approval_requested: '#/components/schemas/DesignApprovalRequestedNotificationContent',
            design_approval_response: '#/components/schemas/DesignApprovalResponseNotificationContent',
            design_mention: '#/components/schemas/DesignMentionNotificationContent',
            team_invite: '#/components/schemas/TeamInviteNotificationContent',
            folder_access_requested: '#/components/schemas/FolderAccessRequestedNotificationContent'
        },
        propertyName: 'type'
    },
    oneOf: [
        {
            '$ref': '#/components/schemas/ShareDesignNotificationContent'
        },
        {
            '$ref': '#/components/schemas/ShareFolderNotificationContent'
        },
        {
            '$ref': '#/components/schemas/CommentNotificationContent'
        },
        {
            '$ref': '#/components/schemas/DesignAccessRequestedNotificationContent'
        },
        {
            '$ref': '#/components/schemas/DesignApprovalRequestedNotificationContent'
        },
        {
            '$ref': '#/components/schemas/DesignApprovalResponseNotificationContent'
        },
        {
            '$ref': '#/components/schemas/DesignMentionNotificationContent'
        },
        {
            '$ref': '#/components/schemas/TeamInviteNotificationContent'
        },
        {
            '$ref': '#/components/schemas/FolderAccessRequestedNotificationContent'
        }
    ],
    type: 'object'
} as const;

export const $ShareDesignNotificationContent = {
    description: 'The notification content for when someone shares a design.',
    properties: {
        type: {
            enum: ['share_design'],
            example: 'share_design',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/User'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        design: {
            '$ref': '#/components/schemas/DesignSummary'
        },
        share: {
            '$ref': '#/components/schemas/ShareAction'
        }
    },
    required: ['design', 'receiving_team_user', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $ShareFolderNotificationContent = {
    description: 'The notification content for when someone shares a folder.',
    properties: {
        type: {
            enum: ['share_folder'],
            example: 'share_folder',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/User'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        folder: {
            '$ref': '#/components/schemas/FolderSummary'
        },
        share: {
            '$ref': '#/components/schemas/ShareAction'
        }
    },
    required: ['folder', 'receiving_team_user', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $CommentNotificationContent = {
    description: 'The notification content for when someone comments on a design.',
    properties: {
        type: {
            enum: ['comment'],
            example: 'comment',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/User'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        design: {
            '$ref': '#/components/schemas/DesignSummary'
        },
        comment: {
            '$ref': '#/components/schemas/CommentEvent'
        }
    },
    required: ['comment', 'design', 'receiving_team_user', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $DesignAccessRequestedNotificationContent = {
    description: 'The notification content for when someone requests access to a design.',
    properties: {
        type: {
            enum: ['design_access_requested'],
            example: 'design_access_requested',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        design: {
            '$ref': '#/components/schemas/DesignSummary'
        }
    },
    required: ['design', 'receiving_team_user', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $DesignApprovalRequestedNotificationContent = {
    description: `The notification content for when someone requests a user to
[approve a design](https://www.canva.com/help/get-approval/).`,
    properties: {
        type: {
            enum: ['design_approval_requested'],
            example: 'design_approval_requested',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/User'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        requested_groups: {
            items: {
                '$ref': '#/components/schemas/Group'
            },
            type: 'array'
        },
        design: {
            '$ref': '#/components/schemas/DesignSummary'
        },
        approval_request: {
            '$ref': '#/components/schemas/ApprovalRequestAction'
        }
    },
    required: ['approval_request', 'design', 'receiving_team_user', 'requested_groups', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $DesignApprovalResponseNotificationContent = {
    description: 'The notification content for when someone approves a design or gives feeback.',
    properties: {
        type: {
            enum: ['design_approval_response'],
            example: 'design_approval_response',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/User'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        requesting_user: {
            '$ref': '#/components/schemas/User'
        },
        responding_groups: {
            items: {
                '$ref': '#/components/schemas/Group'
            },
            type: 'array'
        },
        design: {
            '$ref': '#/components/schemas/DesignSummary'
        },
        approval_response: {
            '$ref': '#/components/schemas/ApprovalResponseAction'
        }
    },
    required: ['approval_response', 'design', 'receiving_team_user', 'responding_groups', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $DesignMentionNotificationContent = {
    description: 'The notification content for when someone mentions a user in a design.',
    properties: {
        type: {
            enum: ['design_mention'],
            example: 'design_mention',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/User'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        design: {
            '$ref': '#/components/schemas/DesignSummary'
        }
    },
    required: ['design', 'receiving_team_user', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $TeamInviteNotificationContent = {
    description: `The notification content for when someone is invited to a
[Canva team](https://www.canva.com/help/about-canva-for-teams/).`,
    properties: {
        type: {
            enum: ['team_invite'],
            example: 'team_invite',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/User'
        },
        receiving_user: {
            '$ref': '#/components/schemas/User'
        },
        inviting_team: {
            '$ref': '#/components/schemas/Team'
        }
    },
    required: ['inviting_team', 'receiving_user', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $FolderAccessRequestedNotificationContent = {
    description: 'The notification content for when someone requests access to a folder.',
    properties: {
        type: {
            enum: ['folder_access_requested'],
            example: 'folder_access_requested',
            type: 'string'
        },
        triggering_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        receiving_team_user: {
            '$ref': '#/components/schemas/TeamUser'
        },
        folder: {
            '$ref': '#/components/schemas/Folder'
        }
    },
    required: ['folder', 'receiving_team_user', 'triggering_user', 'type'],
    type: 'object'
} as const;

export const $ShareAction = {
    description: 'Metadata about the share event.',
    properties: {
        message: {
            description: `The optional message users can include when sharing something with another
user using the Canva UI.`,
            example: 'Check this out!',
            type: 'string'
        }
    },
    required: ['message'],
    type: 'object'
} as const;

export const $ApprovalRequestAction = {
    description: 'Metadata about the design approval request.',
    properties: {
        message: {
            description: 'The message included by the user when requesting a design approval.',
            example: 'LGTM!',
            type: 'string'
        }
    },
    required: ['message'],
    type: 'object'
} as const;

export const $ApprovalResponseAction = {
    description: 'Metadata about the design approval response.',
    properties: {
        approved: {
            description: `Whether the design was approved. When \`true\`, the reviewer has approved
the design.`,
            type: 'boolean'
        },
        message: {
            description: 'The message included by a user responding to a design approval request.',
            type: 'string'
        }
    },
    required: ['approved'],
    type: 'object'
} as const;